### ============================================================================
### Step 1: reformatting RF predictor for RCST inputs
### No need to run after processed it for the first time
library(tidyverse)
# Set working directory
#setwd('C:/Workspace/rapid-climate-stress-testing-SCCWRP/steering/'); getwd();
setwd('G:/RB9/rapid-climate-stress-testing-SCCWRP/steering'); getwd();
load("G:/RB9/rapid-climate-stress-testing-SCCWRP/steering/2.RData")
# Source the functions
source('../R/utils.R')
### Step 3 end==================================================================
# Chat-GPT suggested optimization
library(future); library(tictoc);
comid_list = RB9_comid_list[97:2116] #1:529, 530:1059, 1060:1587, 1588:2116
### Step 3 end==================================================================
# Chat-GPT suggested optimization
library(future); library(tictoc);
comid_list = RB9_comid_list[97:2116] #1:529, 530:1059, 1060:1587, 1588:2116
{
# Plan for using multiple background R sessions
plan(future::multisession, workers = 32)
# Function to process a single comid
process_comid <- function(comid) {
result <- Call_RCST_Octave_Scripts(comid, "hist", 2)
log_message(paste("Processed item:", comid))
return(result)
}
tic()
# Create a list of futures for each comid
futures <- vector("list", length(comid_list))
for (i in seq_along(comid_list)) {
futures[[i]] <- future(process_comid(comid_list[i]))
}
# Wait for the tasks to complete
values <- lapply(futures, value)
toc()
}
